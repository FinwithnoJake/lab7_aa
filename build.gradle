subprojects {
    apply plugin: 'java'

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation 'org.slf4j:slf4j-api:1.7.36'
        implementation 'com.google.code.gson:gson:2.10.1'
        implementation 'com.google.guava:guava:31.1-jre'
        implementation 'org.apache.commons:commons-lang3:3.12.0'
        implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.17.2'
        implementation 'io.github.cdimascio:dotenv-java:2.3.2'
    }
}

project(':server') {
    apply plugin: 'application'
    mainClassName = 'server.ServerApp'

    dependencies {
        implementation project(':common')
        implementation 'org.postgresql:postgresql:42.5.4'
    }

    jar {
        manifest.attributes(
                'Main-Class': 'server.ServerApp',
                'Implementation-Title': 'Gradle Server'
        )
    }
}

project(':client') {
    apply plugin: 'application'
    mainClassName = 'client.ClientApp'

    dependencies {
        implementation project(':common')
    }

    run {
        standardInput = System.in
    }

    jar {
        manifest.attributes(
                'Main-Class': 'client.ClientApp',
                'Implementation-Title': 'Gradle Client'
        )
    }
}

// Определяем fatJar только для проектов с плагином application
project(':server') {
    tasks.register('fatJar', Jar) {
        archiveClassifier = 'fat'

        from sourceSets.main.output
        dependsOn configurations.runtimeClasspath

        duplicatesStrategy = DuplicatesStrategy.EXCLUDE

        manifest {
            attributes('Main-Class': mainClassName)
        }

        from {
            configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
        }
    }
}

project(':client') {
    tasks.register('fatJar', Jar) {
        archiveClassifier = 'fat'

        from sourceSets.main.output
        dependsOn configurations.runtimeClasspath

        duplicatesStrategy = DuplicatesStrategy.EXCLUDE

        manifest {
            attributes('Main-Class': mainClassName)
        }

        from {
            configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
        }
    }
}
